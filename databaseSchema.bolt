/**
 * This Bolt file gets compiled into the database.rules.json file for the Firebase Realtime
 * Database. There are libraries that claim to be able to generate typescript definitions that
 * correspond to this schema, but neither of the two that I tried were good enough, so the
 * TypeScript definitions are maintained by hand in functions/apiContract/database/DataModel.ts.
 */

path / {
  read() { false } /* TODO change this to false when the game is done! */
  write() { false }
}

path /games/{gameId}/gameStates/fullJson is String {
  read() { false }
}

path /games/{gameId}/gameStates/publicJson is String {
  read() { true }
}

// Each player can read their own private state only, as long as they know the player ID.
path /games/{gameId}/gameStates/privateContextsJson/{playerId} is String {
  read() { true }
}

path /games/{gameId}/gameConfig is GameConfig {
  read() { true }
}

path /games/{gameId}/playerIdentities is Map<Position, String> {
  read() { false }
}


// Game events are stored separately because we don't want to waste resources
// fetching them all regularly. They're for record keeping only â€“ push and forget.
path /gameEvents/{gameId} is String[] {
  read() { false }
}

type GameConfig {
  gameId: String,
  gameStatus: GameStatus,
  playerFriendlyNames: Map<Position, String>,
}

type GameStatus extends String {
  validate() {
    this === 'waitingToStart' ||
    this === 'inProgress' ||
    this === 'finished'
  }
}

type Position extends String {
  validate() {
    this === 'north' ||
    this === 'south' ||
    this === 'east' ||
    this === 'west'
  }
}
