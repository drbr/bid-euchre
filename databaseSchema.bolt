/**
 * This Bolt file gets compiled into the database.rules.json file for the Firebase Realtime
 * Database. There are libraries that claim to be able to generate typescript definitions that
 * correspond to this schema, but neither of the two that I tried were good enough, so the
 * TypeScript definitions are maintained by hand in functions/apiContract/database/DataModel.ts.
 */

isCurrentUser(uid) { auth != null && auth.uid === uid }

path / {
  write() { false }
}

path /publicGameState/{gameId} is PublicGameState {
  read() { true }
}

path /gameConfig/{gameId} is GameConfig {}
path /gameConfig/{gameId}/playersByPosition/{position}/userAuthId {
  read() { false }
}
path /gameConfig/{gameId}/playersByPosition/{position}/friendlyName {
  read() { true }
}

path /playerPrivateGameState/{gameId}/{userAuthId} {
  read() { isCurrentUser(userAuthId) }
}

type PublicGameState {
  score: Map<Partnership, Number>,
  currentDealer: Position,
  bids: Map<Position, Bid>,
  trump: Trump,
  // currentTrick: Trick,
  wonTricks: Map<Partnership, Number>,
}

type GameConfig {
  playersByPosition: Map<Position, PlayerInGameConfig>
}

type PlayerInGameConfig {
  userAuthId: String,
  friendlyName: String,
}

type PlayerPrivateGameState {
  position: Position,
  hand: Card[],
}

type Suit extends String {
  validate() {
    this === 'C' ||
    this === 'H' ||
    this === 'S' ||
    this === 'D'
  }
}

type Rank extends String {
  validate() {
    this === '9' ||
    this === '10' ||
    this === 'J' ||
    this === 'Q' ||
    this === 'K' ||
    this === 'A'
  }
}

type Card {
  rank: Rank,
  suit: Suit
}

type Position extends String {
  validate() {
    this === 'north' ||
    this === 'south' ||
    this === 'east' ||
    this === 'west'
  }
}

type Partnership extends String {
  validate() { this === 'northsouth' || this === 'eastwest' }
}

type Bid extends String | Number | Null {
  validate() {
    this === 1 ||
    this === 2 ||
    this === 3 ||
    this === 4 ||
    this === 5 ||
    this === 6 ||
    this === 12 ||
    this === 24 ||
    this === 48 ||
    this === 96 ||
    this === 192 ||
    this === null ||
    this === 'pass'
  }
}

type Trump extends Suit | Null;

// type Trick extends Map<Position, Card | Null> {
//   lead: Position,
// }
