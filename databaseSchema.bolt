/**
 * This Bolt file gets compiled into the database.rules.json file for the Firebase Realtime
 * Database. There are libraries that claim to be able to generate typescript definitions that
 * correspond to this schema, but neither of the two that I tried were good enough, so the
 * TypeScript definitions are maintained by hand in functions/apiContract/database/DataModel.ts.
 */

path / {
  read() { true } /* REMOVE THIS WHEN GAME IS READY FOR DEPLOYMENT */
  write() { false }
}

path /publicGameConfig/{gameId} is PublicGameConfig {
  read() { true }
}

// The full contents of the current state of the game's state machine
path /gameMachineState/{gameId}/fullJson is String {
  read() { false }
}

// The contents of the current state of the game's state machine, sanitized of info
// that may reveal player-private information, but still enough to construct the state on the
// frontend.
path /gameMachineState/{gameId}/publicJson is String {
  read() { true }
}

// Game events are (for now) private to the server
path /gameEventsJson/{gameId} is GameEvents {
  read() { false }
}

// Player identities are private to the server
path /playerIdentities/{gameId} is Map<Position, String> {
  read() { false }
}

// Player-private game state can be read only by that player.
// Since a player knows only their own ID, this is "security by obscurity".
path /playerPrivateGameState/{gameId}/{playerId} is PlayerPrivateGameState {
  read() { true }
}

type PublicGameConfig {
  gameStatus: GameStatus,
  playerFriendlyNames: Map<Position, String>,
}

type GameStatus extends String {
  validate() {
    this === 'waitingToStart' ||
    this === 'inProgress' ||
    this === 'finished'
  }
}

type GameEvents extends String[] {}

type PlayerPrivateGameState {
  hand: String,
}

type Position extends String {
  validate() {
    this === 'north' ||
    this === 'south' ||
    this === 'east' ||
    this === 'west'
  }
}
